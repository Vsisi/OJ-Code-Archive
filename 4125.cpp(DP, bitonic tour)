#include<bits/stdc++.h>
using namespace std;
const double INF = DBL_MAX;
const int N = 55;
struct Point{
    Point(double x, double y):x(x), y(y) {}
    double distance(const Point& other) {
        return sqrt( (other.x - x)*(other.x - x) + (other.y - y)*(other.y - y) );
    }
    double x, y;
};
double dp[N][N];
double dis[N][N];
vector<Point> pv;
int main() {
    int n;
    double x, y;
    while(cin >> n) {
        if(n == EOF) {
            break;
        }
        pv.clear();
        for(int i = 0; i < N; i++) {
            for(int j = 0; j < N; j++) {
                dp[i][j] = INF;
            }
        }
        for(int i = 0; i < n; i++) {
            cin >> x >> y;
            Point temp = Point(x, y);
            for(int j = 0; j < i; j++) {
                dis[i][j] = dis[j][i] = pv[j].distance(temp);
            }
            pv.push_back(temp);
        }
        dp[0][0] = 0;
        for(int i = 0; i < n; i++) {
            for(int j = i; j < n; j++) { //i <= j
                if(j == i) {
                    for(int k = 0; k < i; k++) {
                        dp[i][j] =  min(dp[i][j], dp[k][j-1] + dis[k][j] + dis[i-1][i]);
                    }
                }else if(i+1 == j) {
                    for(int k = 0; k < j; k++) {
                        dp[i][j] = min(dp[i][j], dp[k][i] + dis[k][j]);
                    }
                }else {
                    dp[i][j] = dp[i][j-1] + dis[j-1][j];
                }
            }
        }
        printf("%.2lf\n", dp[n-1][n-1]);
    }
    return 0;
}
